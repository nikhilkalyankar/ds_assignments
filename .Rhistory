rm(list = ls())
data("diamond")
g <- ggplot(diamond,aes(x = carat,y=price))
g <- g + xlab("Mass (carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size = 6,colour = "black", alpha = 0.2)
g <- g + geom_point(size = 5,colour = "blue", alpha = 0.2)
g <- g + geom_smooth(method = "lm", colour = "black")
g
g <- ggplot(diamond,aes(x = carat,y=price))
g <- g + xlab("Mass (carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size = 6,colour = "black", alpha = 0.2)
g <- g + geom_point(size = 5,colour = "blue", alpha = 0.2)
g <- g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
?diamond
?I
source('~/.active-rstudio-document', echo=TRUE)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat*10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
sum(e)
sum(e *x)
g <- ggplot(diamond,aes(x = carat,y=price))
g <- g + xlab("Mass (carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size = 6,colour = "black", alpha = 0.2)
g <- g + geom_point(size = 5,colour = "blue", alpha = 0.2)
g <- g + geom_smooth(method = "lm", colour = "black")
library(plotly)
install.packages("plotly")
library(plotly)
p -> ggplotly(g)
p <- ggplotly(g)
p
devtools::install_github('hadley/ggplot2')
install.packages("devtools")
library(ggplot2)
p <- ggplotly(g)
devtools::install_github('hadley/ggplot2')
info()
help
q()
library(plotly)
library(ggplot2)
p <- ggplotly(g)
p
rm(list = list())
rm(list = ls())
?plot_ly
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
library(UsingR)
data("diamond")
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
ggplotly(g)
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
ggplotly
ggplotly(g)
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(w*x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x_m <- x - mean(x)
coef(lm(y~x))[2]
data(mtcars)
coef(lm(mpg~wt,data=mtcars))[2]
0.4*1.5
(x - mean(x))/sd(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
coef(lm(y~x))[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w
mean(w*x)
mean(w*x)^0.5
W*x
w*x
x_m <- c(0.18,0.18,-1.54,0.42,0,42,0,42,0.95)
mean(x_m)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x_m <- x - mean(x)
coef(lm(y~x_m))[2]
coef(lm(y~x - 1))[2]
coef(lm(y ~ I(x - mean(x)) - 1))[2]
lm(y ~ I(x - mean(x)) - 1)
coef(lm(y ~ I(x - mean(x)) - 1))
?lm
cor(x,y)
cor(x,y) * sd(y)/sd(x)
cor(x,y) * var(y)/var(x)
x <- c(0,x)
y <- c(0,y)
cor(x,y) * var(y)/var(x)
cor(x,y) * sd(y)/sd(x)
lm(y ~ x)
lm(y ~ x -1)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(w * x)
mean(w * x)/w
mean(w * x)/sum(w)
sum(w * x)/sum(w)
rm(list = ls())
data("diamond")
fit <- lm(diamond,price ~ carat)
fit <- lm(price ~ carat,data = diamond)
fit
summary(fit)
diamond
tbl_df(diamond)
library(dplyr)
tbl_df(diamond)
summarize(diamond)
summarize(tbl_df(diamond))
summary(tbl_df(diamond))
plotly(diamond,type="box")
plotly(diamond, x = carat, y = price, type="box")
plot_ly(diamond, x = carat, y = price, type="box")
plot_ly(diamond, type="box")
?plot_ly
plot_ly(diamond, x = diamond$carat,y = diamond$price, type="box")
plot_ly(diamond, x = diamond$carat,y = diamond$price, type="scatter")
plot_ly(diamond, x = diamond$carat,y = diamond$price, type="scatter" mode="markers")
plot_ly(diamond, x = diamond$carat,y = diamond$price, type="scatter", mode="markers")
plot_ly(diamond, x = diamond$carat,type="histogram", mode="markers")
plot_ly(diamond, x = diamond$carat,type="histogram)
/
;
sfasf
)""
"
plot_ly(diamond,x=diamond$carat,type="histogram")
plot_ly(diamond,x=diamond$price,type="histogram")
license()
getwd()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
summary(fit)$sigma
data("mtcars")
fit2 <- lm(data=mtcars,mtcars$mpg ~ mtcars~wt)
fit2 <- lm(mtcars$mpg ~ mtcars~wt, data=mtcars)
fit2 <- lm(mtcars$mpg ~ mtcars$wt, data=mtcars)
summary(fit2)
?qt
coef2 <- summary(fit2)$coef
coef2
coef2[1,1] + c(-1,1) * coef[2,1]*qt(-.95,fit$df)
coef2[1,1] + c(-1,1) * coef2[2,1]*qt(-.95,fit$df)
fit$df.residual
coef2[1,1] + c(-1,1) * coef2[2,1]*qt(-.95,summary(fit2)$df)
f <- summary(fit2)
coef2[1,1] + c(-1,1) * coef2[2,1]*qt(0.95, f$df)
coef2[1,1] + coef2[2,1]*qt(0.95, f$df)
coef2[1,1] + coef2[2,1]*qt(0.975, f$df)
coef2[1,1] + coef2[2,1]*qt(0.95, f$df)
coef2[1,1] + coef2[2,1]*qt(0.95, f$df)*mean(mtcars$wt)
?mtcars
?predict
pre2 <- predict(fit2)
?pre2
pre2
summary(fit2)
pre2 <- predict(fit2,mtcars$wt = 3)
pre2 <- predict(fit2,newdata = 3)
pre2
summary(pre2)
pre2 <- predict(fit2,newdata = 3, df = summary(fit2)$df)
pre2
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef <- summary(fit2)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef[2, 2]
predict(fit, newdata = c(3000), interval = ("prediction"))
newdata <- data.frame(x = c(3000))
predict(fit2, newdata, interval = ("prediction"))
newdata <- data.frame(x = mtcars$wt)
pre <- predict(fit2, newdata, interval = ("prediction"))
summary(pre)
pre
predict(fit2, newdata, interval = ("confidence"))
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef[2, 2])
sumCoef
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit2$df) * sumCoef[2, 2])*2
pre <- predict(fit2, newdata = 3, interval = ("prediction"))
pre
mtcars
pre <- predict(fit2, interval = ("prediction"))
pre
newdata <- data.frame(mtcars$wt = c(3))
newdata <- data.frame(c(3))
pre <- predict(fit2, newdata, interval = ("prediction"))
pre <- predict(fit2, newdata = mtcars$wt, interval = ("prediction"))
pre
summary(fit2)
(37.2851 - 5.3445)/37.2851
predict(fit, newdata = data.frame(mtcars$wt = 3), interval = "prediction")
predict(fit2, newdata = data.frame(mtcars$wt = 3), interval = "prediction")
fit2 <- lm(mpg ~ wt,data = mtcars)
predict(fit2, newdata = data.frame(wt = 3), interval = "prediction")
confint(fit2)[2, ] * 2
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
sum(resid(lm(y~x)))
fit <- lm(mpg ~ wt, data = mtcars)
coefint(fit)
?coefficients
confint(fit)
sumCoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumCoef[2, 2])
sumCoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumCoef[2, 2])
sumCoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumCoef[2, 2]
fit <- lm(mpg ~ I(mean(wt)), data = mtcars)
fit <- lm(mpg ~ mean(wt), data = mtcars)
?I
wt2 <- mean(mtcars$wt)*c(1:length(mtcars$wt))
wt2
wt2 <- mean(mtcars$wt)*diag(length(mtcars$wt))
wt2
wt2 <- mean(mtcars$wt)
fit <- lm(mpg ~ wt2, data = mtcars)
mtcars2 <- mutate(mtcars,wt2 = mean(wt))
library(dplyr)
mtcars2 <- mutate(mtcars,wt2 = mean(wt))
fit <- lm(mpg ~ wt2, data = mtcars2)
confint(fit)
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit)
33.45 - 6.486*mean(mtcars$wt)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
mean(wt)
mean(mtcars$wt)
p1 <- predict(fit, newdata = (wt = c(mean(wt))), interval = ("confidence"))
p1 <- predict(fit, newdata = (wt = c(mean(mtcars$wt))), interval = ("confidence"))
p1
(sumCoef[1,1] + sumCoef[2,1])/sumCoef[1,1]
summary(fit)
(sumCoef[1,2] + sumCoef[2,2])/sumCoef[1,2]
resid(fit)
sum(resid(fit))
sum(resid(fit)^2)
fit  <- lm(mpg ~ .,mtcars)
summary(fit)
?lm
?glm
library(swirl)
swirl()
rm(list = ls())
swirl()
require(datasets)
data("swiss")
?swiss
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(galton$child)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
bye()
swirl()
fit <- lm(child ~ parent)
fit <- lm(child ~ parent,data = galton)
sqrt(sum(fit$residuals)^2/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n02)
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- sqrt(deviance(fit)/(n-2))
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.square
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
coef(lm(child ~ 1, galton))[1,1] == mean(galton$child)
(lm(child ~ 1, galton))$coefficients[1,1] == mean(galton$child)
lm(child ~ 1, galton)$coefficients[1,1] == mean(galton$child)
lm(child ~ 1, galton)$coefficients == mean(galton$child)
swirl()
m(child ~ 1, galton)
lm(child ~ 1, galton)
head(tress)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit <- lm(Volume ~ Height + Constant -1, trees)
fit2 <- lm(Volume ~ Height + Constant -1, trees)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply((list(fit,fit2)),coef)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
lapply((list(fit,fit2)),coef)
info()
skip()
q()
rm(list = ls())
q()
all_liquor <- read.csv("https://data.ny.gov/api/views/hrvs-fxs2/rows.csv?accessType=DOWNLOAD")
restaurants_serving_liquor <- all_liquor[grep("ON-PREMISES LIQUOR",all_liquor[,2]),]
restaurants_serving_liquor <- restaurants_serving_liquor[which(restaurants_serving_liquor[,19] > 39 & restaurants_serving_liquor[,20] > -76),]
View(restaurants_serving_liquor)
colnames(restaurants_serving_liquor)
restaurants_serving_liquor <- all_liquor[grep("ON-PREMISES LIQUOR",all_liquor[,2]),]
restaurants_serving_liquor <- restaurants_serving_liquor[which(restaurants_serving_liquor[,19] > 39 & restaurants_serving_liquor[,20] > -76 & !grep("",all_liquor[,9])),]
restaurants_serving_liquor <- all_liquor[grep("ON-PREMISES LIQUOR",all_liquor[,2]),]
restaurants_serving_liquor <- restaurants_serving_liquor[which(restaurants_serving_liquor[,19] > 39 & restaurants_serving_liquor[,20] > -76 & !grep("",restaurants_serving_liquor[,9])),]
grep("",restaurants_serving_liquor[,9])
restaurants_serving_liquor <- all_liquor[grep("ON-PREMISES LIQUOR",all_liquor[,2]),]
grep("",restaurants_serving_liquor[,9])
restaurants_serving_liquor <- restaurants_serving_liquor[which(restaurants_serving_liquor[,19] > 39 & restaurants_serving_liquor[,20] > -76),]
restaurants_serving_liquor <- restaurants_serving_liquor[-grep("",restaurants_serving_liquor[,9]),]
restaurants_serving_liquor <- all_liquor[grep("ON-PREMISES LIQUOR",all_liquor[,2]),]
restaurants_serving_liquor <- restaurants_serving_liquor[which(restaurants_serving_liquor[,19] > 39 & restaurants_serving_liquor[,20] > -76),]
res <- restaurants_serving_liquor[grep("",restaurants_serving_liquor[,9]),]
colnames(res)
res <- restaurants_serving_liquor[restaurants_serving_liquor[,9] == "",]
res <- restaurants_serving_liquor[restaurants_serving_liquor[,9] != "",]
restaurants_serving_liquor[restaurants_serving_liquor[,9] != "",9]
View(restaurants_serving_liquor)
res <- restaurants_serving_liquor
restaurants_serving_liquor[restaurants_serving_liquor[,9] != "",8] <- restaurants_serving_liquor[restaurants_serving_liquor[,9] != "",9]
restaurants_serving_liquor <- res
View(res)
res[which(res[,9]!="")]
temp <- res[which(res[,9]!=""),9]
head(temp)
res[which(res[,9]!=""),8] <- res[which(res[,9]!=""),9]
res[res[,9]!="",8] <- res[res[,9]!="",9]
colnames(res)
res[1,8] <- res[1,9]
res[1,8] <- "stromg"
res <- data.frame(restaurants_serving_liquor,stringsAsFactors=FALSE)
res[1,8] <- res[1,9]
c <- restaurants_serving_liquor[restaurants_serving_liquor[,9] != "",9]
d <- restaurants_serving_liquor[restaurants_serving_liquor[,9] == "",8]
rbind(c,d)
e <- rbind(c,d)
?rbind
str(e)
str(c)
str(d)
e <- rbind(c,d,stringsAsFactors = FALSE
)
head(e)
?type
typeof(c)
typeof(d)
e <- cbind(c,d)
head(e)
e <- cbind(c,d,deparse.level = 1)
head(e)
library(dplyr)
head(res)
c <- mutate(res,dba=paste(Doing.Business.As..DBA., Premises.Name))
colnames(c)
head(c[,22])
c <- mutate(res,name=trim(paste(Doing.Business.As..DBA., Premises.Name))
)
c <- mutate(res,name=trimws(paste(Doing.Business.As..DBA., Premises.Name)))
head(c[,22])
restaurants_serving_liquor %>% mutate(name=trimws(paste(Doing.Business.As..DBA., Premises.Name)))
colnames(res)
getwd()
setwd("~/R/tutorial/rmarkdown")
setwd("~/R/tutorials/rmarkdown")
getwd()
list.files()
eqidata <- read.csv("EQIDATA_ALL_DOMAINS_NON-TRANSFORMED_2013JULY18.CSV")
View(eqidata)
eqidata_old <- read.csv("https://edg.epa.gov/data/Public/ORD/NHEERL/EQI/Eqidata_all_domains_2014March11.csv")
View(eqidata_old)
eqidata <- eqidata_old
?gsub
meta <- "A_TeCA_ln - 1,1,2,2-tetrachloroethane (tons emitted per year); A_112TCA_ln - 1,1,2-trichloroethane (tons emitted per year); A_DBCP_ln - 1,2-dibromo-3-chloropropane(tons emitted per year); A_TDI_ln - 2,4-toluene diisocyanate (tons emitted per year); A_2Clacephen_ln - 2-chloroacetophenone (tons emitted per year); A_2NP_ln - 2-nitropropane (tons emitted per year); A_PNP_ln - 4-nitrophenol (tons emitted per year); A_CH3CN_ln - acetonitrile (tons emitted per year); A_Acetophenone_ln - Acetophenone (tons emitted per year); A_Acrolein_ln - Acrolein (tons emitted per year); A_Acrylic_acid_ln - Acrylic acid (tons emitted per year); A_C3H3N_ln - Acrylonitrile (tons emitted per year); A_Sb_ln - Antimony compounds (tons emitted per year); A_Benzidine_ln - Benzidine (tons emitted per year); A_Benzyl_Cl_ln - Benzyl chloride (tons emitted per year); A_Be_ln - Beryllium compounds (tons emitted per year); A_biphenyl_ln - Biphenyl (tons emitted per year); A_DEHP_ln - Bis-2-ethylhexyl phthalate (tons emitted per year); A_Bromoform_ln - Bromoform (tons emitted per year); A_Cd_ln - Cadmium compounds (tons emitted per year); A_CS2_ln - Carbon disulfide (tons emitted per year); A_CCl4 - Carbon tetrachloride (tons emitted per year); A_CS_ln - Carbon sulfide (tons emitted per year); A_Cl_ln - Chlorine; A_C6H5Cl - Chlorobenzene (tons emitted per year); A_chloroform_ln - Chloroform (tons emitted per year); A_Chloroprene_ln - Chloroprene (tons emitted per year); A_Cr_ln - Chromium compounds (tons emitted per year); A_Cresol_ln - Cresol/cresylic acid (tons emitted per year); A_Cumene_ln - Cumene (tons emitted per year); A_CN_ln - Cyanide compounds (tons emitted per year); A_DBP_ln - Dibutylphthalate (tons emitted per year); A_Diesel_ln - Diesel engine emissions (tons emitted per year); A_DMF_ln - Dimethyl formamide (tons emitted per year); A_Me2_phthalate_ln - Dimethyl phthalates (tons emitted per year); A_Me2SO4_ln - Dimethyl sulfate (tons emitted per year); A_ECH_ln - Epichlorohydrin_ln (tons emitted per year); A_Etacrylate_ln - Ethyl acrylate(tons emitted per year); A_EtCl_ln - Ethyl chloride (tons emitted per year); A_EDB_ln - Ethylene dibromide (tons emitted per year); A_EDC_ln - Ethylene dichloride (tons emitted per year); A_EGLY_ln - Ethylene glycol (tons emitted per year); A_EOx_ln - Ethylene oxide (tons emitted per year); A_EdCl2_ln - Ethylidene dichloride (tons emitted per year); A_Glycol_ethers_ln - Glycol ethers (tons emitted per year); A_HCB_ln - Hexachlorobenzene (tons emitted per year); A_HCBD_ln - Hexachlorobutadiene (tons emitted per year); A_HCCPD_ln - Hexachlorocyclopentadiene (tons emitted per year); A_Hexane_ln - Hexane (tons emitted per year); A_N2H2_ln - Hydrazine (tons emitted per year); A_HCl_ln - Hydrochloric acid (tons emitted per year); A_Isophorone_ln - Isophorone (tons emitted per year); A_Pb_ln - Lead compounds (tons emitted per year); A_Mn_ln - Manganese compounds (tons emitted per year); A_Hg_ln - Mercury compounds (tons emitted per year); A_MeOH_ln - Methanol(tons emitted per year); A_MIBK_ln - Methyl isobutyl ketone (tons emitted per year); A_MMA_ln - Methyl methacrylate (tons emitted per year); A_MeCl_ln - Methyl chloride (tons emitted per year); A_Mehydrazine_ln - Methylhydrazine (tons emitted per year); A_MTBE_ln - MTBE (tons emitted per year); A_nitrobenzene_ln - Nitrobenzene (tons emitted per year); A_DMA_ln - N,N-dimethylaniline (tons emitted per year); A_otoluidine_ln - o-toluidine (tons emitted per year); A_PAHPOM_ln - PAH/POM (tons emitted per year); A_PCP_ln - Pentachlorophenol (tons emitted per year); A_PH3_ln - Phosphine (tons emitted per year); A_P_ln - Phosphorus (tons emitted per year); A_PCBs_ln - Polychlorinated biphenyls (tons emitted per year); A_ProCl2_ln - Propylene dichloride (tons emitted per year); A_ProO_ln - Propylene oxide (tons emitted per year); A_Quinoline_ln - Quinoline (tons emitted per year); A_Se_ln - Selenium compounds (tons emitted per year); A_Styrene_ln - Styrene (tons emitted per year); A_Cl4C2_ln - Tetrachloroethylene (tons emitted per year); A_Toluene_ln - Toluene (tons emitted per year); A_C2HCl3_ln - Trichloroethylene (tons emitted per year); A_Et3N_ln - Triethylamine (tons emitted per year); A_VyAc_ln - Vinyl acetate (tons emitted per year); A_VyCl_ln - Vinyl chloride (tons emitted per year); A_11DCE_ln - Vinylidene chloride (tons emitted per year); A_PM10_mean_ln - Particulate matter under 10 micrometers in aerodynamic diameter (µg/m3 5 year average); A_PM25_mean - Particulate matter under 2.5 micrometers in aerodynamic diameter (µg/m3 5 year average); A_NO2_mean_ln - Nitrogen dioxide (parts per billion 5 year average); A_SO2_mean_ln - Sulfur dioxide (parts per billion 5 year average); A_O3_mean_ln - Ozone (parts per million 5 year average); A_CO_mean_ln - Carbon monoxide (parts per million 5 year average). Water Domain variables: Units are given in original units and variables were natural log transformed where indicated. D303_Percent - % of stream length impaired in county (percent); SEWAGENPDESperKM - Sewage Permits per 1000 km of Stream in County (permits per 1000km stream length); INDNPDESperKM - Industrial Permits per 1000 km of Stream in County (permits per 1000km stream length); STORMNPDESperKM - Stormwater Permits per 1000 km of Stream in County (permits per 1000km stream length); numDays_Close_Activity_tot - # of days closed per event in county 2000-2005 (days); numDays_Cont_Activity_tot - # of days per contamination advisory event in county 2000-2005 (days); numDays_Rain_Activity_tot - # of days per rain advisory event in county 2000-2005 (days); Per_TotPopSS_ave - Percent of Population on Self Supply, average 2000 and 2005 (percent); Per_PSWithSW_ave - Percent of Public Supply Population which is on Surface Water, average 2000 and 2005 (percent); Ca_ln_ave - Calcium (Ca) precipitation weighted mean (mg/L); Mg_ln_ave - Magnesium (Mg) precipitation weighted mean (mg/L); K_ln_ave - Potassium (K) precipitation weighted mean (mg/L); Na_ln_ave - Sodium (Na) precipitation weighted mean (mg/L); NH4_mean_ave - Ammonium (NH4) precipitation weighted mean (mg/L); NO3_mean_ave - Nitrate (NO3) precipitation weighted mean (mg/L); Cl_ln_ave - Chloride (Cl) precipitation weighted mean (mg/L); SO4_mean_ave - Sulfate (SO4) precipitation weighted mean (mg/L); Hg_ln_ave - Total Mercury deposition (ng/M2); AvgOfD3_ave - % of county drought – extreme (D3-D4) (percent); W_As_ln - Arsenic (mg/L); W_Ba_ln - Barium (mg/L); W_Cd_ln - Cadmium (mg/L); W_Cr_ln - Chromium (total) (mg/L); W_CN_ln - Cyanide (mg/L); W_FL_ln - Fluoride (mg/L); W_HG_ln - Mercury (inorganic) (mg/L); W_NO3_ln - Nitrate (as N) (mg/L); W_NO2_ln - Nitrite (as N) (mg/L); W_SE_ln - Selenium (mg/L); W_Sb_ln - Antimony (mg/L); W_Be_ln - Beryllium (mg/L); W_Tl_ln - Thallium (mg/L); W_Endrin_ln - Endrin (ug/L); W_Lindane_ln - Lindane (mg/L); W_methoxychlor_ln - Methoxychlor (ug/L); W_Toxaphene_ln - Toxaphene (ug/L); W_Dalapon_ln - Dalapon (ug/L); W_DEHA_ln - Di(2-ethylhexyl)adipate (DEHA) (ug/L); W_Oxamyl_ln - Oxamyl (Vydate) (ug/L); W_Simazine_ln - Simazine (ug/L); W_DEHP_ln - Di(2-ethylhexyl) phthalate (DEHP) (ug/L); W_Picloram_ln - Picloram (ug/L); W_Dinoseb_ln - Dinoseb (ug/L); W_HCCPD_ln - Hexachlorocyclopentadiene (ug/L); W_Carbofuran_ln - Carbofuran (ug/L); W_atrazine_ln - Atrazine (ug/L); W_Alachlor_ln - Alachlor (ug/L); W_Heptachlor_ln - Heptachlor (ug/L); W_Heptachlor_epox_ln - Heptachlor Epoxide (ug/L); W_24D_ln - 2,4-D (2,4-Dichlorophenoxyacetic acid) (ug/L); W_silvex_ln - 2,4,5-TP (Silvex) (ug/L); W_HCB_ln - Hexachlorobenzene (ug/L); W_BenzoAP_ln - Benzo[a]pyrene (ug/L); W_PCP_ln - Pentachlorophenol (ug/L); W_124TCIB_ln - 1,2,4-Trichlorobenzene (ug/L); W_PCB_ln - Polychlorinated biphenyls (PCBs) (ug/L); W_DBCP_ln - 1,2-Dibromo-3-chloropropane (DBCP) (ug/L); W_EBD_ln - Ethylene dibromide (EDB) (ug/L); W_xylenes_ln - Xylenes (Total) (ug/L); W_Chlordane_ln - Chlordane (ug/L); W_DCM_ln - Dichloromethane (Methylene chloride) (ug/L); W_ODCB_ln - 1,2-Dichlorobenzene (o-Dichlorobenzene) (ug/L); W_PDCB_ln - 1,4-Dichlorobenzene (p-Dichlorobenzene) (ug/L); W_VCM_ln - Vinyl chloride (ug/L); W_11DCE_ln - 1,1-Dichloroethylene (ug/L); W_t12DCE_ln - trans-1,2-Dichloroethylene (ug/L); W_EDC_ln - 1,2-Dichloroethane (Ethylene Dichloride) (ug/L); W_111trichlorane_ln - 1,1,1-Trichloroethane (ug/L); W_CCl4_ln - Carbon Tetrachloride (ug/L); W_PDC_ln - 1,2-Dichloropropane (ug/L); W_Trichlorene_ln - Trichloroethylene (ug/L); W_112TCA_ln - 1,1,2-Trichloroethane (ug/L); W_C2Cl4_ln - Tetrachloroethylene (ug/L); W_benzene_ln - Monochlorobenzene (Chlorobenzene) (ug/L); W_Cl1benz_ln - Benzene (ug/L); W_Toluene_ln - Toluene (ug/L); W_ethylbenz_ln - Ethylbenzene (ug/L); W_styrene_ln - Styrene (ug/L); W_DCE_ln - cis-1,2-Dichloroethylene (ug/L); W_alpha - Alpha Particles (Gross Alpha, excl.Radon and U) (PCl/L). Land Domain variables: Units are given in original units. All variables, except radon, were log transformed. pct_manure_acres_ln - Manure, acres applied per county acres (percent); pct_nematode_acres_ln - Chemicals used to control Nematodes, acres applied per county acres (percent); pct_disease_acres_ln - Chemicals used to control Diseases in crops and orchards, acres applied per county acres (percent); pct_defoliate_acres_ln - Chemicals used to control growth, thin fruit, or defoliate, acres applied per county acres (percent); Pct_AU_ln - Animal Units, animal units per county acres (percent); farms_per_acre_ln - Number of farms (number); pct_irrigated_acres_ln - Irrigated acres, acres irrigated per county acres (percent); pct_harvested_acres - Harvested acres, acres harvested per county acres (percent); insecticides_ln - Insecticides applied (pounds); herbicides_ln - Herbicides applied (pounds); fungicides_ln - Fungicides applied (pounds); Mean_as_ln - Mean level of arsenic from sampled county sources (ppm); Mean_se_ln - Mean level of selenium from sampled county sources (ppm); Mean_hg_ln - Mean level of mercury from sampled county sources (ppm); Mean_pb_ln - Mean level of lead from sampled county sources (ppm); Mean_zn_ln - Mean level of zinc from sampled county sources (ppm); Mean_cu_ln - Mean level of copper from sampled county sources (ppm); Mean_al_pct - Mean level of aluminum from sampled county sources (weighted percent); Mean_na_pct_ln - Mean level of sodium from sampled county sources (weighted percent); Mean_mg_pct_ln - Mean level of magnesium from sampled county sources (weighted percent); Mean_p_pct - Mean level of phosphorous from sampled county sources (weighted percent); Mean_ti_pct_ln - Mean level of titanium from sampled county sources (weighted percent); Mean_ca_pct_ln - Mean level of calcium from sampled county sources (weighted percent); Mean_fe_pct_ln - Mean level of iron from sampled county sources (weighted percent); Radon zone - Radon zone (ordinal value); log_facilities - Log-transformed rate of all faciliites per county (proportion). Built Domain variables: Units are given in original units and variables were natural log transformed where indicated. Fatal_rate_log - natural log transformed rate of fatal car crashes per county (log-transformed count / county population); pct_public_transport_log - natural log of percent of county residents who report using public transportation (percent); hwyprop - proportion of all roads that are highways (proportion); ryprpo - proportion of all roads that are secondary roads (proportion); rate_al_pn_gm_env_log - natural log transformed rate of vice-related businesses per county (log of count of businesses / county population); rate_ent_env_log - natural log transformed rate of entertainment-related businesses per county (log of count of businesses / county population); rate_ed_env_log - natural log transformed rate of education-related businesses per county (log of count of businesses / county population); rate_food_env_neg - rate of unhealthy food related businesses per county (log of count of businesses / county population); rate_food_env_pos_log - natural log transformed rate of positive food-related businesses per county (log of count of businesses / county population); rate_hc_env_log - natural log transformed rate of health care-related businesses per county (log of count of businesses / county population); rate_rec_env_log - natural log transformed rate of recreation-related businesses per county (log of count of businesses / county population); rate_civic_env_log - natural log transformed rate of social service-related businesses per county (log of count of businesses / county population); rate_trans_env_log - natural log transformed rate of transportation-related businesses per county (log of count of businesses / county population); to_unit_rate_log - natural log transformed rate of the sum of the following two variables (low_rent_units - count of low rent units per county (count) and section_eight_units - count of section eight units per county (count)) (log of summation of units / county population); Sociodemographic Domain variables: Units are given in original units and variables were natural log transformed where indicated. Pct_rent_occ - percent renter-occupied units (percent); pct_vac_units - percent vacant units (percent); med_hh_value - median household value (dollars); med_hh_inc - median household income (dollars); pct_pers_lt_pov - percent of persons living below federal poverty level (percent); pct_no_eng - percent persons who do not speak English (percent); pct_hs_more - percent of persons with more than a high school education (percent); pct_unemp - percent of persons who are unemployed (percent); work_out_co - percent of persons who work outside the county (percent); med_rooms - median number of rooms in residence (count); pct_mt_10_units - percent of residences with more than 10 units (percent); violent_rate_log - natural log transformed violent crime rate (log of count of violent crimes / county population)."
;
""
"""
meta <- "A_TeCA_ln - 1,1,2,2-tetrachloroethane (tons emitted per year); A_112TCA_ln - 1,1,2-trichloroethane (tons emitted per year); A_DBCP_ln - 1,2-dibromo-3-chloropropane(tons emitted per year); A_TDI_ln - 2,4-toluene diisocyanate (tons emitted per year); A_2Clacephen_ln - 2-chloroacetophenone (tons emitted per year); A_2NP_ln - 2-nitropropane (tons emitted per year); A_PNP_ln - 4-nitrophenol (tons emitted per year); A_CH3CN_ln - acetonitrile (tons emitted per year); A_Acetophenone_ln - Acetophenone (tons emitted per year); A_Acrolein_ln - Acrolein (tons emitted per year); A_Acrylic_acid_ln - Acrylic acid (tons emitted per year); A_C3H3N_ln - Acrylonitrile (tons emitted per year); A_Sb_ln - Antimony compounds (tons emitted per year); A_Benzidine_ln - Benzidine (tons emitted per year); A_Benzyl_Cl_ln - Benzyl chloride (tons emitted per year); A_Be_ln - Beryllium compounds (tons emitted per year); A_biphenyl_ln - Biphenyl (tons emitted per year); A_DEHP_ln - Bis-2-ethylhexyl phthalate (tons emitted per year); A_Bromoform_ln - Bromoform (tons emitted per year); A_Cd_ln - Cadmium compounds (tons emitted per year); A_CS2_ln - Carbon disulfide (tons emitted per year); A_CCl4 - Carbon tetrachloride (tons emitted per year); A_CS_ln - Carbon sulfide (tons emitted per year); A_Cl_ln - Chlorine; A_C6H5Cl - Chlorobenzene (tons emitted per year); A_chloroform_ln - Chloroform (tons emitted per year); A_Chloroprene_ln - Chloroprene (tons emitted per year); A_Cr_ln - Chromium compounds (tons emitted per year); A_Cresol_ln - Cresol/cresylic acid (tons emitted per year); A_Cumene_ln - Cumene (tons emitted per year); A_CN_ln - Cyanide compounds (tons emitted per year); A_DBP_ln - Dibutylphthalate (tons emitted per year); A_Diesel_ln - Diesel engine emissions (tons emitted per year); A_DMF_ln - Dimethyl formamide (tons emitted per year); A_Me2_phthalate_ln - Dimethyl phthalates (tons emitted per year); A_Me2SO4_ln - Dimethyl sulfate (tons emitted per year); A_ECH_ln - Epichlorohydrin_ln (tons emitted per year); A_Etacrylate_ln - Ethyl acrylate(tons emitted per year); A_EtCl_ln - Ethyl chloride (tons emitted per year); A_EDB_ln - Ethylene dibromide (tons emitted per year); A_EDC_ln - Ethylene dichloride (tons emitted per year); A_EGLY_ln - Ethylene glycol (tons emitted per year); A_EOx_ln - Ethylene oxide (tons emitted per year); A_EdCl2_ln - Ethylidene dichloride (tons emitted per year); A_Glycol_ethers_ln - Glycol ethers (tons emitted per year); A_HCB_ln - Hexachlorobenzene (tons emitted per year); A_HCBD_ln - Hexachlorobutadiene (tons emitted per year); A_HCCPD_ln - Hexachlorocyclopentadiene (tons emitted per year); A_Hexane_ln - Hexane (tons emitted per year); A_N2H2_ln - Hydrazine (tons emitted per year); A_HCl_ln - Hydrochloric acid (tons emitted per year); A_Isophorone_ln - Isophorone (tons emitted per year); A_Pb_ln - Lead compounds (tons emitted per year); A_Mn_ln - Manganese compounds (tons emitted per year); A_Hg_ln - Mercury compounds (tons emitted per year); A_MeOH_ln - Methanol(tons emitted per year); A_MIBK_ln - Methyl isobutyl ketone (tons emitted per year); A_MMA_ln - Methyl methacrylate (tons emitted per year); A_MeCl_ln - Methyl chloride (tons emitted per year); A_Mehydrazine_ln - Methylhydrazine (tons emitted per year); A_MTBE_ln - MTBE (tons emitted per year); A_nitrobenzene_ln - Nitrobenzene (tons emitted per year); A_DMA_ln - N,N-dimethylaniline (tons emitted per year); A_otoluidine_ln - o-toluidine (tons emitted per year); A_PAHPOM_ln - PAH/POM (tons emitted per year); A_PCP_ln - Pentachlorophenol (tons emitted per year); A_PH3_ln - Phosphine (tons emitted per year); A_P_ln - Phosphorus (tons emitted per year); A_PCBs_ln - Polychlorinated biphenyls (tons emitted per year); A_ProCl2_ln - Propylene dichloride (tons emitted per year); A_ProO_ln - Propylene oxide (tons emitted per year); A_Quinoline_ln - Quinoline (tons emitted per year); A_Se_ln - Selenium compounds (tons emitted per year); A_Styrene_ln - Styrene (tons emitted per year); A_Cl4C2_ln - Tetrachloroethylene (tons emitted per year); A_Toluene_ln - Toluene (tons emitted per year); A_C2HCl3_ln - Trichloroethylene (tons emitted per year); A_Et3N_ln - Triethylamine (tons emitted per year); A_VyAc_ln - Vinyl acetate (tons emitted per year); A_VyCl_ln - Vinyl chloride (tons emitted per year); A_11DCE_ln - Vinylidene chloride (tons emitted per year); A_PM10_mean_ln - Particulate matter under 10 micrometers in aerodynamic diameter (µg/m3 5 year average); A_PM25_mean - Particulate matter under 2.5 micrometers in aerodynamic diameter (µg/m3 5 year average); A_NO2_mean_ln - Nitrogen dioxide (parts per billion 5 year average); A_SO2_mean_ln - Sulfur dioxide (parts per billion 5 year average); A_O3_mean_ln - Ozone (parts per million 5 year average); A_CO_mean_ln - Carbon monoxide (parts per million 5 year average). Water Domain variables: Units are given in original units and variables were natural log transformed where indicated. D303_Percent - % of stream length impaired in county (percent); SEWAGENPDESperKM - Sewage Permits per 1000 km of Stream in County (permits per 1000km stream length); INDNPDESperKM - Industrial Permits per 1000 km of Stream in County (permits per 1000km stream length); STORMNPDESperKM - Stormwater Permits per 1000 km of Stream in County (permits per 1000km stream length); numDays_Close_Activity_tot - # of days closed per event in county 2000-2005 (days); numDays_Cont_Activity_tot - # of days per contamination advisory event in county 2000-2005 (days); numDays_Rain_Activity_tot - # of days per rain advisory event in county 2000-2005 (days); Per_TotPopSS_ave - Percent of Population on Self Supply, average 2000 and 2005 (percent); Per_PSWithSW_ave - Percent of Public Supply Population which is on Surface Water, average 2000 and 2005 (percent); Ca_ln_ave - Calcium (Ca) precipitation weighted mean (mg/L); Mg_ln_ave - Magnesium (Mg) precipitation weighted mean (mg/L); K_ln_ave - Potassium (K) precipitation weighted mean (mg/L); Na_ln_ave - Sodium (Na) precipitation weighted mean (mg/L); NH4_mean_ave - Ammonium (NH4) precipitation weighted mean (mg/L); NO3_mean_ave - Nitrate (NO3) precipitation weighted mean (mg/L); Cl_ln_ave - Chloride (Cl) precipitation weighted mean (mg/L); SO4_mean_ave - Sulfate (SO4) precipitation weighted mean (mg/L); Hg_ln_ave - Total Mercury deposition (ng/M2); AvgOfD3_ave - % of county drought – extreme (D3-D4) (percent); W_As_ln - Arsenic (mg/L); W_Ba_ln - Barium (mg/L); W_Cd_ln - Cadmium (mg/L); W_Cr_ln - Chromium (total) (mg/L); W_CN_ln - Cyanide (mg/L); W_FL_ln - Fluoride (mg/L); W_HG_ln - Mercury (inorganic) (mg/L); W_NO3_ln - Nitrate (as N) (mg/L); W_NO2_ln - Nitrite (as N) (mg/L); W_SE_ln - Selenium (mg/L); W_Sb_ln - Antimony (mg/L); W_Be_ln - Beryllium (mg/L); W_Tl_ln - Thallium (mg/L); W_Endrin_ln - Endrin (ug/L); W_Lindane_ln - Lindane (mg/L); W_methoxychlor_ln - Methoxychlor (ug/L); W_Toxaphene_ln - Toxaphene (ug/L); W_Dalapon_ln - Dalapon (ug/L); W_DEHA_ln - Di(2-ethylhexyl)adipate (DEHA) (ug/L); W_Oxamyl_ln - Oxamyl (Vydate) (ug/L); W_Simazine_ln - Simazine (ug/L); W_DEHP_ln - Di(2-ethylhexyl) phthalate (DEHP) (ug/L); W_Picloram_ln - Picloram (ug/L); W_Dinoseb_ln - Dinoseb (ug/L); W_HCCPD_ln - Hexachlorocyclopentadiene (ug/L); W_Carbofuran_ln - Carbofuran (ug/L); W_atrazine_ln - Atrazine (ug/L); W_Alachlor_ln - Alachlor (ug/L); W_Heptachlor_ln - Heptachlor (ug/L); W_Heptachlor_epox_ln - Heptachlor Epoxide (ug/L); W_24D_ln - 2,4-D (2,4-Dichlorophenoxyacetic acid) (ug/L); W_silvex_ln - 2,4,5-TP (Silvex) (ug/L); W_HCB_ln - Hexachlorobenzene (ug/L); W_BenzoAP_ln - Benzo[a]pyrene (ug/L); W_PCP_ln - Pentachlorophenol (ug/L); W_124TCIB_ln - 1,2,4-Trichlorobenzene (ug/L); W_PCB_ln - Polychlorinated biphenyls (PCBs) (ug/L); W_DBCP_ln - 1,2-Dibromo-3-chloropropane (DBCP) (ug/L); W_EBD_ln - Ethylene dibromide (EDB) (ug/L); W_xylenes_ln - Xylenes (Total) (ug/L); W_Chlordane_ln - Chlordane (ug/L); W_DCM_ln - Dichloromethane (Methylene chloride) (ug/L); W_ODCB_ln - 1,2-Dichlorobenzene (o-Dichlorobenzene) (ug/L); W_PDCB_ln - 1,4-Dichlorobenzene (p-Dichlorobenzene) (ug/L); W_VCM_ln - Vinyl chloride (ug/L); W_11DCE_ln - 1,1-Dichloroethylene (ug/L); W_t12DCE_ln - trans-1,2-Dichloroethylene (ug/L); W_EDC_ln - 1,2-Dichloroethane (Ethylene Dichloride) (ug/L); W_111trichlorane_ln - 1,1,1-Trichloroethane (ug/L); W_CCl4_ln - Carbon Tetrachloride (ug/L); W_PDC_ln - 1,2-Dichloropropane (ug/L); W_Trichlorene_ln - Trichloroethylene (ug/L); W_112TCA_ln - 1,1,2-Trichloroethane (ug/L); W_C2Cl4_ln - Tetrachloroethylene (ug/L); W_benzene_ln - Monochlorobenzene (Chlorobenzene) (ug/L); W_Cl1benz_ln - Benzene (ug/L); W_Toluene_ln - Toluene (ug/L); W_ethylbenz_ln - Ethylbenzene (ug/L); W_styrene_ln - Styrene (ug/L); W_DCE_ln - cis-1,2-Dichloroethylene (ug/L); W_alpha - Alpha Particles (Gross Alpha, excl.Radon and U) (PCl/L). Land Domain variables: Units are given in original units. All variables, except radon, were log transformed. pct_manure_acres_ln - Manure, acres applied per county acres (percent); pct_nematode_acres_ln - Chemicals used to control Nematodes, acres applied per county acres (percent); pct_disease_acres_ln - Chemicals used to control Diseases in crops and orchards, acres applied per county acres (percent); pct_defoliate_acres_ln - Chemicals used to control growth, thin fruit, or defoliate, acres applied per county acres (percent); Pct_AU_ln - Animal Units, animal units per county acres (percent); farms_per_acre_ln - Number of farms (number); pct_irrigated_acres_ln - Irrigated acres, acres irrigated per county acres (percent); pct_harvested_acres - Harvested acres, acres harvested per county acres (percent); insecticides_ln - Insecticides applied (pounds); herbicides_ln - Herbicides applied (pounds); fungicides_ln - Fungicides applied (pounds); Mean_as_ln - Mean level of arsenic from sampled county sources (ppm); Mean_se_ln - Mean level of selenium from sampled county sources (ppm); Mean_hg_ln - Mean level of mercury from sampled county sources (ppm); Mean_pb_ln - Mean level of lead from sampled county sources (ppm); Mean_zn_ln - Mean level of zinc from sampled county sources (ppm); Mean_cu_ln - Mean level of copper from sampled county sources (ppm); Mean_al_pct - Mean level of aluminum from sampled county sources (weighted percent); Mean_na_pct_ln - Mean level of sodium from sampled county sources (weighted percent); Mean_mg_pct_ln - Mean level of magnesium from sampled county sources (weighted percent); Mean_p_pct - Mean level of phosphorous from sampled county sources (weighted percent); Mean_ti_pct_ln - Mean level of titanium from sampled county sources (weighted percent); Mean_ca_pct_ln - Mean level of calcium from sampled county sources (weighted percent); Mean_fe_pct_ln - Mean level of iron from sampled county sources (weighted percent); Radon zone - Radon zone (ordinal value); log_facilities - Log-transformed rate of all faciliites per county (proportion). Built Domain variables: Units are given in original units and variables were natural log transformed where indicated. Fatal_rate_log - natural log transformed rate of fatal car crashes per county (log-transformed count / county population); pct_public_transport_log - natural log of percent of county residents who report using public transportation (percent); hwyprop - proportion of all roads that are highways (proportion); ryprpo - proportion of all roads that are secondary roads (proportion); rate_al_pn_gm_env_log - natural log transformed rate of vice-related businesses per county (log of count of businesses / county population); rate_ent_env_log - natural log transformed rate of entertainment-related businesses per county (log of count of businesses / county population); rate_ed_env_log - natural log transformed rate of education-related businesses per county (log of count of businesses / county population); rate_food_env_neg - rate of unhealthy food related businesses per county (log of count of businesses / county population); rate_food_env_pos_log - natural log transformed rate of positive food-related businesses per county (log of count of businesses / county population); rate_hc_env_log - natural log transformed rate of health care-related businesses per county (log of count of businesses / county population); rate_rec_env_log - natural log transformed rate of recreation-related businesses per county (log of count of businesses / county population); rate_civic_env_log - natural log transformed rate of social service-related businesses per county (log of count of businesses / county population); rate_trans_env_log - natural log transformed rate of transportation-related businesses per county (log of count of businesses / county population); to_unit_rate_log - natural log transformed rate of the sum of the following two variables (low_rent_units - count of low rent units per county (count) and section_eight_units - count of section eight units per county (count)) (log of summation of units / county population); Sociodemographic Domain variables: Units are given in original units and variables were natural log transformed where indicated. Pct_rent_occ - percent renter-occupied units (percent); pct_vac_units - percent vacant units (percent); med_hh_value - median household value (dollars); med_hh_inc - median household income (dollars); pct_pers_lt_pov - percent of persons living below federal poverty level (percent); pct_no_eng - percent persons who do not speak English (percent); pct_hs_more - percent of persons with more than a high school education (percent); pct_unemp - percent of persons who are unemployed (percent); work_out_co - percent of persons who work outside the county (percent); med_rooms - median number of rooms in residence (count); pct_mt_10_units - percent of residences with more than 10 units (percent); violent_rate_log - natural log transformed violent crime rate (log of count of violent crimes / county population)."
"""
?read.delim
meta <- read.delim("metadata.txt",sep="; ")
meta <- read.delim("metadata.txt",sep=";")
meta <- read.delim("metadata.txt",sep="")
meta <- read.delim("metadata.txt",sep=";")
View(meta)
meta <- colnames(meta)
View(meta)
head(meta)
meta <- read.delim("metadata.txt",sep=";")
colnames(meta)
library(tidyr)
library(dplyr)
